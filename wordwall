#!/usr/bin/env python3

import os
import sys
import math
import random
import argparse
from datetime import datetime

import numpy
from PIL import Image
from wordcloud import WordCloud, ImageColorGenerator

_INSTALL_DIR = os.path.dirname(os.path.realpath(__file__))

_LOGOS = list(map(
    lambda l: os.path.splitext(l)[0],
    os.listdir(os.path.join(_INSTALL_DIR, 'logo'))
))

_MSG = set()
def _msg(**kwargs):
    if 'id' in kwargs:
        if kwargs['id'] in _MSG:
            return
        _MSG.add(kwargs['id'])
    if kwargs['type'] == 'err':
        print('Error: {text}'.format(text=kwargs['text']), file=sys.stderr)
        sys.exit(1)
    elif kwargs['type'] == 'warn':
        print('Warning: {text}'.format(text=kwargs['text']), file=sys.stderr)
    else:
        print('Info: {text}'.format(text=kwargs['text']))

def _getDefaultLogo():
    try:
        import distro
        dist = distro.id() # See https://distro.readthedocs.io/en/latest/#distro.id
        if dist in _LOGOS:
            return dist
        else:
            _msg(id='distro',text='No default logo for distribution \'{}\''.format(dist))
    except:
        _msg(id='distro',text='Could not auto-detect Linux distribution. Install the distro module.')
        pass
    return 'tux'

def _getDefaultOutputFile():
    return 'wordwall_' + datetime.now().strftime('%Y%m%d_%H%M%S') + '.png'

def _getDefaultRes():
    try:
        import Xlib.display
        res = Xlib.display.Display().screen().root.get_geometry()
        return [res.width, res.height]
    except:
        _msg(id='xlib',text='Could not auto-detect screen resolution. Install the Xlib module.')
        pass
    return [1920, 1080] # fallback

def _getMaxWords(res, args=None):
    if args and args.max_words:
        return args.max_words
    area = res[0] * res[1]
    return int(round(area / 1000, -2))

def _getFontSize(res, args=None):
    if args and args.font_size:
        return args.font_size
    return res[1] // 27

def _getText(args):
    text = ""
    # Find files
    files = []
    if args.text_file:
        files.extend(args.text_file)
    home = os.path.expanduser('~')
    if args.shell_history:
        for f in [
            os.path.join(home, '.bash_history'),
            os.path.join(home, '.history'),
            os.path.join(home, '.histfile'),
            os.path.join(home, '.zhistory'),
            os.path.join(home, '.zsh_history'),
            os.path.join(home, '.local', 'share', 'fish', 'fish_history')
        ]:
            if os.path.exists(f):
                files.append(f)
    if args.shell_init:
        for f in [
            os.path.join(home, '.bashrc'),
            os.path.join(home, '.bash_profile'),
            os.path.join(home, '.profile'),
            os.path.join(home, '.cshrc'),
            os.path.join(home, '.zshrc'),
            os.path.join(home, '.zshenv'),
            os.path.join(home, '.zprofile'),
            os.path.join(home, '.config', 'fish', 'config.fish')
        ]:
            if os.path.exists(f):
                files.append(f)
    if args.git_repo:
        try:
            import git
            for repo_path in args.git_repo:
                try:
                    repo = git.Repo(repo_path)
                    for commit in repo.iter_commits():
                        text += commit.message
                except:
                    _msg(type='warn', text='Not a git repository: {}'.format(repo_path))
                    pass
        except:
            _msg(id='git', type='warn', text='Cannot fetch git logs. Install the GitPython module.')
            pass

    # Concatenate text in all files
    for f in files:
        try:
            text += open(f, 'r').read()
        except:
            _msg(type='warn', text='Failed to read source file: {}'.format(f))
            pass
    return text

def _rgbReplace(img, src, dst):
    data = numpy.array(img)
    img.convert('RGBA')
    r, g, b, a = data.T
    white_pixels = (r == src[0]) & (g == src[1]) & (b == src[2])
    data[..., :-1][white_pixels.T] = dst
    return Image.fromarray(data)

def _getMask(args):
    # Get mask file path
    if args.mask_file:
        mask_file = args.mask_file
    elif args.logo:
        mask_file = os.path.join(_INSTALL_DIR, 'logo', args.logo + '.png')
    # Create canvas
    canvas = Image.new('RGBA', (args.width, args.height), color='#ffffff')
    # Resize logo
    logo_height = args.height // 2
    logo = Image.open(mask_file).convert("RGBA")
    logo = logo.resize((logo_height, logo_height))
    # Replace pure white FFFFFF with FEFEFE in the logo
    # to distinguish with the canvas (negative space)
    if args.mask_show_white:
        logo = _rgbReplace(logo, (255, 255, 255), (254, 254, 254))
    # Paste logo to center of canvas
    pos = (
        (args.width - logo_height) // 2,
        logo_height // 2
    )
    canvas.paste(logo, pos, logo)
    # Return image mask data
    return numpy.array(canvas)

def _generate(args):
    text = _getText(args)
    if not text:
        _msg(type='err', text='No valid source text. Please check your arguments.')
    mask = _getMask(args)
    res = (args.width, args.height)
    cloud = WordCloud(
        width=args.width,
        height=args.height,
        background_color=args.bg_color,
        max_words=_getMaxWords(res, args),
        mask=mask,
        font_path=args.font_path,
        max_font_size=_getFontSize(res, args),
        random_state=45,
        relative_scaling=0
    ).generate(text)
    # Apply color function
    if args.color:
        color_func = lambda *a, **kw: random.choice(args.color)
    else:
        color_func = ImageColorGenerator(mask)
    cloud.recolor(color_func=color_func)
    cloud.to_file(args.output)

def main():
    # Parse arguments
    parser = argparse.ArgumentParser(description='Generates a word cloud wallpaper from user text files')
    # SOURCES
    group = parser.add_argument_group('SOURCES')
    group.add_argument('--shell-history', action='store_true', help='read shell history files')
    group.add_argument('--shell-init', action='store_true', help='read shell init files')
    group.add_argument('--git-repo', metavar='DIR', type=str, action='append', help='path to git repo(s) to read logs from (may be given multiple times)')
    group.add_argument('--text-file', metavar='FILE', type=str, action='append', help='read from text file(s) (may be given multiple times)')
    # APPEARANCE
    group = parser.add_argument_group('APPEARANCE')
    group.add_argument('--logo', type=str, default=_getDefaultLogo(), choices=_LOGOS, help='logo to use. Default: \'%(default)s\'')
    group.add_argument('--mask-file', type=str, help='mask file to use')
    group.add_argument('--mask-show-white', action='store_true', help='disable masking out pure white')
    group.add_argument('-W', '--width', type=int, default=_getDefaultRes()[0], help='output image width. Default: \'%(default)s\'')
    group.add_argument('-H', '--height', type=int, default=_getDefaultRes()[1], help='output image height. Default: \'%(default)s\'')
    group.add_argument('--max-words', type=int, help='max number of words to use. Default: \'{}\''.format(_getMaxWords(_getDefaultRes())))
    group.add_argument('--font-path', type=str, help='font path to use')
    group.add_argument('--font-size', type=int, help='mask file to use. Default: \'{}\''.format(_getFontSize(_getDefaultRes())))
    group.add_argument('--bg-color', metavar='COLOR', type=str, default='#000000', help='background color. Default: \'%(default)s\'')
    group.add_argument('--color', metavar='COLOR', type=str, action='append', help='foreground color(s) (may be given multiple times)')
    # Output
    parser.add_argument('output', metavar='FILE', type=str, nargs='?', default=_getDefaultOutputFile(), help='path to output file. Default: \'%(default)s\'')
    args = parser.parse_args()
    # Select default source if none is given
    if not args.shell_history and not args.shell_init and not args.git_repo and not args.text_file:
        args.shell_history = True
    # Generate wallpaper
    _generate(args)

if __name__ == '__main__':
    main()
